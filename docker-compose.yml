services:
  # Database PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: alive_logs_postgres
    environment:
      POSTGRES_DB: alive_logs_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    #ports:
    #  - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Applicazione Node.js
  app:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: alive_logs_app
    environment:
      - NODE_ENV=production
      - MODE=server
      - PORT=3000
      - DB_HOST=alive_logs_postgres
      - DB_PORT=5432
      - DB_NAME=alive_logs_db
      - DB_USER=postgres
      - DB_PASSWORD=password
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin per gestione database
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: alive_logs_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
  pgadmin_data:
